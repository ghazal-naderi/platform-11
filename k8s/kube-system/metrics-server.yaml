---
# Source: metrics-server/templates/metrics-server-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ms-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
---
# Source: metrics-server/templates/aggregated-metrics-reader-cluster-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: system:metrics-server-aggregated-reader
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods","nodes"]
    verbs: ["get", "list", "watch"]
---
# Source: metrics-server/templates/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:ms-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
rules:
  - apiGroups:
    - ""
    resources:
      - pods
      - nodes
      - nodes/stats
      - namespaces
    verbs:
      - get
      - list
      - watch
---
# Source: metrics-server/templates/auth-delegator-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ms-metrics-server:system:auth-delegator
  namespace: kube-system
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: ms-metrics-server
    namespace: kube-system
---
# Source: metrics-server/templates/metrics-server-crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:ms-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:ms-metrics-server
subjects:
  - kind: ServiceAccount
    name: ms-metrics-server
    namespace: kube-system
---
# Source: metrics-server/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: ms-metrics-server-auth-reader
  namespace: kube-system
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
  - kind: ServiceAccount
    name: ms-metrics-server
    namespace: kube-system
---
# Source: metrics-server/templates/metric-server-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ms-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
  annotations:
    {}
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: https
  selector:
    app: metrics-server
    release: ms
  type: ClusterIP
---
# Source: metrics-server/templates/metrics-server-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ms-metrics-server
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: metrics-server
      release: ms
  replicas: 1
  template:
    metadata:
      labels:
        app: metrics-server
        release: ms
    spec:
      serviceAccountName: ms-metrics-server
      containers:
        - name: metrics-server
          image: "gcr.io/google_containers/metrics-server-amd64:v0.3.6"
          imagePullPolicy: IfNotPresent
          command:
            - /metrics-server
            - --cert-dir=/tmp
            - --logtostderr
            - --secure-port=8443
            - --kubelet-insecure-tls
          ports:
          - containerPort: 8443
            name: https
          livenessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
          readinessProbe:
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10001
          volumeMounts:
          - name: tmp
            mountPath: /tmp
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      volumes:
      - name: tmp
        emptyDir: {}
---
# Source: metrics-server/templates/metrics-api-service.yaml
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1beta1.metrics.k8s.io
  labels:
    app: metrics-server
    chart: metrics-server-2.9.0
    release: ms
    heritage: Helm
spec:
  service:
    name: ms-metrics-server
    namespace: kube-system
  group: metrics.k8s.io
  version: v1beta1
  insecureSkipTLSVerify: true
  groupPriorityMinimum: 100
  versionPriority: 100
