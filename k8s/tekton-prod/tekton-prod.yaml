---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-prod-webhook
  namespace: tekton-pipelines
spec:
  params:
  - description: The external domain for the EventListener e.g. `$(inputs.params.EventListenerName).<PROXYIP>.nip.io`
    name: ExternalDomain
    type: string
  - description: The GitHub user
    name: GitHubUser
    type: string
  - description: The GitHub repo where the webhook will be created
    name: GitHubRepo
    type: string
  - description: The GitHub organization where the webhook will be created
    name: GitHubOrg
    type: string
  - description: The Secret name for GitHub access token and string. Must contain
      keys 'access-token' and  'secret-string'
    name: GitHubSecretName
    type: string
  - default: github.com
    description: The GitHub domain. Override for GitHub Enterprise
    name: GitHubDomain
    type: string
  - default: '[\"release\"]'
    description: List of events the webhook will send notifications for
    name: WebhookEvents
    type: string
  steps:
  - args:
    - -ce
    - |
      set -e
      echo "Create Webhook"
      if [ $(inputs.params.GitHubDomain) = "github.com" ];then
        curl -d "{\"name\": \"web\",\"active\": true,\"events\": $(inputs.params.WebhookEvents),\"config\": {\"url\": \"https://$(inputs.params.ExternalDomain)/\",\"content_type\": \"json\",\"insecure_ssl\": \"0\" ,\"secret\": \"$(cat /var/secret/secret-string)\"}}" -X POST -u $(inputs.params.GitHubUser):$(cat /var/secret/access-token) -L https://api.github.com/repos/$(inputs.params.GitHubOrg)/$(inputs.params.GitHubRepo)/hooks
      else
        curl -d "{\"name\": \"web\",\"active\": true,\"events\": $(inputs.params.WebhookEvents),\"config\": {\"url\": \"https://$(inputs.params.ExternalDomain)/\",\"content_type\": \"json\",\"insecure_ssl\": \"0\" ,\"secret\": \"$(cat /var/secret/secret-string)\"}}" -X POST -u $(inputs.params.GitHubUser):$(cat /var/secret/access-token) -L https://$(inputs.params.GitHubDomain)/api/v3/repos/$(inputs.params.GitHubOrg)/$(inputs.params.GitHubRepo)/hooks
      fi
    command:
    - sh
    image: pstauffer/curl:latest
    name: create-prod-webhook
    volumeMounts:
    - mountPath: /var/secret
      name: github-secret
  volumes:
  - name: github-secret
    secret:
      secretName: $(inputs.params.GitHubSecretName)
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  params:
  - name: version
    description: The release version to apply
  - name: prerelease
    description: Whether this is a prerelease
  - name: assetsurl
    description: URL to asssets
  - name: draft
    description: Whether this is a draft 
  - name: gitrepository
    description: The repository from which this release was obtained
  tasks:
  - name: apply-infra-prod
    taskRef:
      name: apply-infra-release
      kind: ClusterTask
    params:
    - name: version
      value: $(params.version)
    - name: prerelease
      value: $(params.prerelease)
    - name: assetsurl
      value: $(params.assetsurl)
    - name: draft
      value: $(params.draft)
    - name: gitrepository
      value: $(params.gitrepository)
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: apply-infra-release
spec:
  params:
    - name: version
      type: string
      description: The release version to apply
    - name: prerelease
      type: string
      description: Whether this is a prerelease
    - name: assetsurl
      type: string
      description: URL to assets
    - name: draft
      type: string
      description: Whether this is a draft 
    - name: gitrepository
      type: string
      description: The repository from which this release was obtained
  steps:
    - name: dry-run
      image: 140554600707.dkr.ecr.eu-west-2.amazonaws.com/platform/infra-tester:latest 
      workingDir: /workspace/releases
      env:
        - name: GITHUB_OAUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: git-webhook
              key: access-token
      envFrom:
        - secretRef:
            name: terraform-secrets
      script: |-
          #!/usr/bin/env ash
          set -e
          ASSETS="$(curl -qLH "Authorization: token ${GITHUB_OAUTH_TOKEN}" $(inputs.params.assetsurl))"
          # Terraform
          TF_ASSET_URL="$(echo "$ASSETS" | jq -r '.[]|select(.name=="terraform-$(inputs.params.version).tgz")|.url')"
          if [[ "$TF_ASSET_URL" != "" ]]; then
            curl -qLH "Authorization: token ${GITHUB_OAUTH_TOKEN}" -H "Accept: application/octet-stream" "${TF_ASSET_URL}" -o terraform-$(inputs.params.version).tgz
            tar xvf terraform-$(inputs.params.version).tgz
            cd terraform/$TERRAFORM_DIR
            echo "Testing Terraform..."
            terraform init -input=false
            terraform plan -input=false
          fi 
          # Kops
          KOPS_ASSET_URL="$(echo "$ASSETS" | jq -r '.[]|select(.name=="kops-cluster-$(inputs.params.version).yaml")|.url')"
          if [[ "$KOPS_ASSET_URL" != "" ]]; then
            curl -qLH "Authorization: token ${GITHUB_OAUTH_TOKEN}" -H "Accept: application/octet-stream" "${KOPS_ASSET_URL}" -o kops-cluster-$(inputs.params.version).yaml
            echo "Testing Kops..."
            kops get cluster -o yaml > kops-cluster-prev.yaml
            kops replace cluster -f kops-cluster-$(inputs.params.version).yaml
            kops update cluster
            kops replace cluster -f kops-cluster-prev.yaml
          fi 
          # Kubernetes
          KUBE_ASSET_URL="$(echo "$ASSETS" | jq -r '.[]|select(.name=="kubernetes-$(inputs.params.version).yaml")|.url')"
          if [[ "$KUBE_ASSET_URL" != "" ]]; then
            curl -qLH "Authorization: token ${GITHUB_OAUTH_TOKEN}" -H "Accept: application/octet-stream" "${KUBE_ASSET_URL}" -o kubernetes-$(inputs.params.version).yaml
            echo "Applying Kubernetes..."
            kubectl apply -f "kubernetes-$(inputs.params.version).yaml" --dry-run=server
          fi 
    - name: apply 
      image: 140554600707.dkr.ecr.eu-west-2.amazonaws.com/platform/infra-tester:latest 
      workingDir: /workspace/releases
      env:
        - name: GITHUB_OAUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: git-webhook
              key: access-token
      envFrom:
        - secretRef:
            name: terraform-secrets
      script: |-
          #!/usr/bin/env ash
          set -e
          ASSETS="$(curl -qLH "Authorization: token ${GITHUB_OAUTH_TOKEN}" $(inputs.params.assetsurl))"
          if ([[ "$(inputs.params.draft)" == 'false' ]] && [[ "$(inputs.params.prerelease)" == 'false' ]]); then
            echo 'this is not a prerelease or draft, we will apply it'
             # Terraform
             TF_ASSET_URL="$(echo "$ASSETS" | jq -r '.[]|select(.name=="terraform-$(inputs.params.version).tgz")|.url')" 
             if [[ "$TF_ASSET_URL" != "" ]]; then
               curl -qLH "Authorization: token ${GITHUB_OAUTH_TOKEN}" -H "Accept: application/octet-stream" "${TF_ASSET_URL}" -o terraform-$(inputs.params.version).tgz
               tar xvf terraform-$(inputs.params.version).tgz
               cd terraform/$TERRAFORM_DIR
               echo "Applying Terraform..."
               terraform init -input=false
               terraform apply -auto-approve -input=false
             fi 
             # Kops
             KOPS_ASSET_URL="$(echo "$ASSETS" | jq -r '.[]|select(.name=="kops-cluster-$(inputs.params.version).yaml")|.url')" 
             if [[ "$KOPS_ASSET_URL" != "" ]]; then
               curl -qLH "Authorization: token ${GITHUB_OAUTH_TOKEN}" -H "Accept: application/octet-stream" "${KOPS_ASSET_URL}" -o kops-cluster-$(inputs.params.version).yaml
               echo "Applying Kops..."
               kops export kubecfg --admin
               kops replace cluster -f kops-cluster-$(inputs.params.version).yaml
               kops update cluster --yes
               kops rolling-update cluster --yes
             fi 
             # Kubernetes
             KUBE_ASSET_URL="$(echo "$ASSETS" | jq -r '.[]|select(.name=="kubernetes-$(inputs.params.version).yaml")|.url')" 
             if [[ "$KUBE_ASSET_URL" != "" ]]; then
               curl -qLH "Authorization: token ${GITHUB_OAUTH_TOKEN}" -H "Accept: application/octet-stream" "${KUBE_ASSET_URL}" -o kubernetes-$(inputs.params.version).yaml
               echo "Applying Kubernetes..."
               kubectl apply -f "kubernetes-$(inputs.params.version).yaml"
               echo "{\"kind\":\"ConfigMap\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"infra-version\",\"namespace\":\"tekton-pipelines\",\"creationTimestamp\":null},\"data\":{\"version\":\"$(inputs.params.version)\"}}" | kubectl apply -f -
             fi 
          else
            echo 'this is a prerelease or draft, no further action required'
          fi
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  params:
  - name: version
    description: The version to deploy
  - name: draft
    description: Whether the release is a draft or not
  - name: prerelease
    description: Whether the release is a prerelease or not
  - name: assetsurl
    description: URL to assets
  - name: gitrepository
    description: The github repo from which to obtain releases
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      generateName: infra-cd-prod-
      namespace: tekton-pipelines
    spec:
      serviceAccountName: infra-build-bot
      pipelineRef:
        name: infra-cd-prod
      params:
      - name: version
        value: "$(tt.params.version)"
      - name: draft
        value: "$(tt.params.draft)"
      - name: prerelease
        value: "$(tt.params.prerelease)"
      - name: assetsurl
        value: "$(tt.params.assetsurl)"
      - name: gitrepository
        value: "$(tt.params.gitrepository)"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  params:
  - name: version
    value: "$(body.release.tag_name)"
  - name: draft
    value: "$(body.release.draft)"
  - name: prerelease
    value: "$(body.release.prerelease)"
  - name: assetsurl
    value: "$(body.release.assets_url)"
  - name: gitrepository
    value: "$(body.repository.full_name)"
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
spec:
  serviceAccountName: tekton-triggers-admin
  triggers:
  - name: infra-cd-prod
    bindings:
    - ref: infra-cd-prod
      kind: TriggerBinding
    template:
      name: infra-cd-prod
    interceptors:
    - github:
        secretRef:
          secretName: git-webhook
          secretKey: secret-string 
        eventTypes:
        - release
    - cel: 
        filter: >-
          (header.match('X-GitHub-Event', 'release') &&
           body.repository.name == 'infra' &&
           body.action == 'released')
---
apiVersion: tekton.dev/v1alpha1
kind: TaskRun
metadata:
  name: infra-cd-prod-webhook-run
  namespace: tekton-pipelines
spec:
  taskRef:
    name: create-prod-webhook
    kind: Task
  params:
  - name: GitHubOrg
    value: "fakebank"
  - name: GitHubUser
    value: "fakeci"
  - name: GitHubRepo
    value: "infra"
  - name: GitHubSecretName
    value: git-webhook
  - name: ExternalDomain
    value: infra-cd-prod.fakebank.com
  - name: WebhookEvents
    value: '[\"release\"]'
  timeout: 1000s
  serviceAccountName: tekton-triggers-createwebhook
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: infra-cd-prod
  namespace: tekton-pipelines
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx-external
spec:
  tls:
  - hosts:
    - infra-cd-prod.fakebank.com
    secretName: infra-cd-prod-tls
  rules:
  - host: infra-cd-prod.fakebank.com
    http:
      paths:
      - path: /
        backend:
          serviceName: el-infra-cd-prod
          servicePort: 8080
