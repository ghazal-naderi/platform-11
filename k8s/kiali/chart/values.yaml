nameOverride: ""
fullnameOverride: ""

image:
  repo: quay.io/kiali/kiali-operator 
  tag: v1.27
  pullPolicy: Always
  pullSecrets: []

# Deployment options for the operator pod.
nodeSelector: {}
podAnnotations: {}
env: []
tolerations: []
resources: {}
affinity: {}
replicaCount: 1
priorityClassName: ""

# metrics.enabled: set to true if you want Prometheus to collect metrics from the operator
metrics:
  enabled: true

# debug.enabled: when true the full ansible logs are dumped after each reconciliation run
# debug.verbosity: defines the amount of details the operator will log (higher numbers are more noisy)
debug:
  enabled: true
  verbosity: "1"

# Defines where the operator will look for Kial CR resources. "" means "all namespaces".
watchNamespace: ""

# Set to true if you want the operator to be able to create cluster roles. This is necessary
# if you want to support Kiali CRs with spec.deployment.accessible_namespaces of '**'.
# Note that this will be overriden to "true" if cr.create is true and cr.spec.deployment.accessible_namespaces is ['**'].
clusterRoleCreator: true

# Set to true if you want to allow the operator to only be able to install Kiali in view-only-mode.
# The purpose for this setting is to allow you to restrict the permissions given to the operator itself.
onlyViewOnlyMode: false

# For what a Kiali CR spec can look like, see:
# https://github.com/kiali/kiali-operator/blob/master/deploy/kiali/kiali_cr.yaml
cr:
  create: true
  name: kiali
  # If you elect to create a Kiali CR (--set cr.create=true)
  # and the operator is watching all namespaces (--set watchNamespace="")
  # then this is the namespace where the CR will be created (the default will be the operator namespace).
  namespace: "kiali"

  spec:
    istio_namespace: istio-system
    istio:
      component_status:
        components:
          - app_label: grafana
            namespace: monitoring
          - app_label: jaeger
            namespace: jaeger
    istio_component_namespaces:
      grafana: monitoring
      jaeger: jaeger
    external_services:
      grafana:
        enabled: true
        in_cluster_url: "http://grafana.monitoring.svc:3000"
        url: "https://grafana.sandbox.11fs-structs.com"
        service: "grafana"
        service_namespace: "monitoring"
      tracing:
        in_cluster_url: "http://stream-query.jaeger.svc:16686"
        url: "http://jaeger.sandbox.11fs-structs.com"
    auth:
      strategy: anonymous
    server:
      web_root: "/"
    deployment:
      accessible_namespaces:
      - '**'
